class RuleHandler(object):
    """RuleHandler class is a helper class that only contains static methods
    which are being used for handling rules dictionary. Rules dictionary is
    the output generated by the syntax parsing.
    """

    @staticmethod
    def is_end_rule(rule):
        """Static method that checks if the rule contains the last rule for the
        command.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains the last rule, False else
        """
        return rule['type'] == '0'

    @staticmethod
    def is_only_one_rule(rule):
        """Static method that checks if the rule contains an argument name.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains an argument name, False else
        """
        return rule['type'] == '1'

    @staticmethod
    def is_constant_rule(rule):
        """Static method that checks if the rule contains a constant.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains constant, False else
        """
        return rule['type'] == '2'

    @staticmethod
    def is_free_form_param_rule(rule):
        """Static method that checks if the rule contains a free form
        argument.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains a free form name option,\
                    False else
        """
        return rule['type'] == '3'

    @staticmethod
    def is_cte_param_rule(rule):
        """Static method that checks if the rule contains a constant argument.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains a free form name option,\
                    False else
        """
        return rule['type'] == '4'

    @staticmethod
    def is_zero_or_one_rule(rule):
        """Static method that checks if the rule contains an argument that can
        be entered zero or one time.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument can be entered zero or one, False else
        """
        return rule['type'] == '?'

    @staticmethod
    def is_zero_or_more_rule(rule):
        """Static method that checks if the rule contains an argument that can
        be entered zero or more times.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument can be entered zero or more, False else
        """
        return rule['type'] == '*'

    @staticmethod
    def is_one_or_more_rule(rule):
        """Static method that checks if the rule contains an argument that can
        be entered one or more times.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument can be entered one or more, False else
        """
        return rule['type'] == '+'

    @staticmethod
    def is_only_one_option_rule(rule):
        """Static method that checks if the rule contains an argument name
        option.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains an argument name option,\
                    False else
        """
        return rule['type'] == '!'

    @staticmethod
    def is_free_form_rule(rule):
        """Static method that checks if the rule contains a free form
        argument.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains a free form name option,\
                    False else
        """
        return rule['type'] == '@'

    @staticmethod
    def is_required_rule(rule):
        """Static method that checks if the rule contains an argument that
        is required

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains an argument that is\
                    required, False else
        """
        return (RuleHandler.is_only_one_rule(rule) or
                RuleHandler.is_one_or_more_rule(rule) or
                RuleHandler.is_only_one_option_rule(rule) or
                RuleHandler.is_free_form_rule(rule))

    @staticmethod
    def is_inner_rule(rule):
        """Static method that checks if the rule contains an argument that
        is an inner rule.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the argument contains an argument that is\
                    an inner rule, False else
        """
        return (RuleHandler.is_zero_or_one_rule(rule) or
                RuleHandler.is_zero_or_more_rule(rule) or
                RuleHandler.is_one_or_more_rule(rule) or
                RuleHandler.is_free_form_rule(rule))

    @staticmethod
    def check_for_inner_rule(rule):
        """Static method that check if a rule has other rules inside.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            bool : True if the has same inner rules, False else.
        """
        return RuleHandler.is_inner_rule(rule) or type(rule['args']) == list

    @staticmethod
    def check_argname_in_rule(rule, theArgName):
        """Static method that checks if an argument has a given name.

        It only checks when the rule type is "1" (argument names are only
        set for this type).

        Args:
            rule (dict): dictionary with the given rule to check.
            theArgName (str) L String with the argument name to check.

        Returns:
            bool : True if the arguments matches the given name, False else.
        """
        if RuleHandler.is_only_one_rule(rule) and rule['args'] == theArgName:
            return True
        return False

    @staticmethod
    def syntax_min_args(rules):
        """Static method that returns the minimum number of arguemnt to be
        entered by the user for a given command.

        All argument which main rule type is "1" are required arguments, and
        all arguements which main rule type is "+" are named arguments that
        have to appear at leas one time.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            int : number of minimum arguments to be entered at the CLI.
        """
        counter = sum([1 if RuleHandler.is_required_rule(rule) else 0 for rule in rules])
        return counter

    @staticmethod
    def get_args_from_rule_as_list(rule):
        """Static method that return a list with all rules contained in the
        'args' entry for the rules dictionary

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            list : list with all rules contained in 'args' entry.
        """
        return rule['args'] if type(rule['args']) == list else [rule, ]

    @staticmethod
    def get_args_from_rule(rule):
        """Static method that returns the value for the 'args' entry in the
        rules dictionary.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            list or str : content of 'args' entry, it could be a list with\
                    more rules or a string with the argument name.
        """
        return rule['args']

    @staticmethod
    def get_counter_from_rule(rule):
        """Static method that returns the value for the 'counter' entry in the
        rules dictionary.

        Counter stores the rule order in relation with all other rules.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            int : rule counter number.
        """
        return rule['counter']

    @staticmethod
    def traverse_args_in_rule(rule):
        """Static method that traverses all entries in 'args' entry for the
        rules dictionary.

        Args:
            rule (dict): dictionary with the given rule to check.

        Returns:
            dict : yield with a rule.
        """
        for rule in rule['args']:
            yield rule
