ARGOS_ATTR = '_Arguments'
RULES_ATTR = '_Rules'
SYNTAX_ATTR = '_Syntax'
CMD_ATTR = '_Cmd'
TREE_ATTR = '_Tree'


def _HANDLE_ERROR(st):
    """
    """
    print(st)
    return None


class RuleHandler(object):
    """RuleHandler class is a helper class that only contains static methods
    which are being used for handling rules dictionary. Rules dictionary is
    the output generated by the syntax parsing.
    """

    @staticmethod
    def isOnlyOneRule(theRule):
        """Static method that checks if the rule contains an argument name.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument contains an argument name, False else
        """
        return theRule['type'] == '1'

    @staticmethod
    def isConstantRule(theRule):
        """Static method that checks if the rule contains a constant.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument contains constant, False else
        """
        return theRule['type'] == '2'

    @staticmethod
    def isEndRule(theRule):
        """Static method that checks if the rule contains the last rule for the
        command.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument contains the last rule, False else
        """
        return theRule['type'] == '0'

    @staticmethod
    def isZeroOrOneRule(theRule):
        """Static method that checks if the rule contains an argument that can
        be entered zero or one time.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument can be entered zero or one, False else
        """
        return theRule['type'] == '?'

    @staticmethod
    def isZeroOrMoreRule(theRule):
        """Static method that checks if the rule contains an argument that can
        be entered zero or more times.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument can be entered zero or more, False else
        """
        return theRule['type'] == '*'

    @staticmethod
    def isOneOrMoreRule(theRule):
        """Static method that checks if the rule contains an argument that can
        be entered one or more times.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument can be entered one or more, False else
        """
        return theRule['type'] == '+'

    @staticmethod
    def isOnlyOneOptionRule(theRule):
        """Static method that checks if the rule contains an argument name
        option.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument contains an argument name option,
            False else
        """
        return theRule['type'] == '!'

    @staticmethod
    def isRequiredRule(theRule):
        """Static method that checks if the rule contains an argument that
        is required

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument contains an argument that is
            required, False else
        """
        return (RuleHandler.isOnlyOneRule(theRule) or
                RuleHandler.isOneOrMoreRule(theRule) or
                RuleHandler.isOnlyOneOptionRule(theRule))

    @staticmethod
    def isInnerRule(theRule):
        """Static method that checks if the rule contains an argument that
        is an inner rule.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the argument contains an argument that is
            an inner rule, False else
        """
        return (RuleHandler.isZeroOrOneRule(theRule) or
                RuleHandler.isZeroOrMoreRule(theRule) or
                RuleHandler.isOneOrMoreRule(theRule))

    @staticmethod
    def checkForInnerRule(theRule):
        """Static method that check if a rule has other rules inside.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            boolean : True if the has same inner rules, False else.
        """
        return RuleHandler.isInnerRule(theRule) or type(theRule['args']) == list

    @staticmethod
    def checkArgNameInRule(theRule, theArgName):
        """Static method that checks if an argument has a given name.

        It only checks when the rule type is "1" (argument names are only
        set for this type).

        Args:
            theRule (dict): dictionary with the given rule to check.
            theArgName (str) L String with the argument name to check.

        Returns:
            boolean : True if the arguments matches the given name, False else.
        """
        if RuleHandler.isOnlyOneRule(theRule) and theRule['args'] == theArgName:
            return True
        return False

    @staticmethod
    def syntaxMinArgs(theRules):
        """Static method that returns the minimum number of arguemnt to be
        entered by the user for a given command.

        All argument which main rule type is "1" are required arguments, and
        all arguements which main rule type is "+" are named arguments that
        have to appear at leas one time.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            int : number of minimum arguments to be entered at the CLI.
        """
        counter = sum([1 if RuleHandler.isRequiredRule(rule) else 0 for rule in theRules])
        return counter

    @staticmethod
    def getArgsFromRuleAsList(theRule):
        """Static method that return a list with all rules contained in the
        'args' entry for the rules dictionary

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            list : list with all rules contained in 'args' entry.
        """
        return theRule['args'] if type(theRule['args']) == list else [theRule, ]

    @staticmethod
    def getArgsFromRule(theRule):
        """Static method that returns the value for the 'args' entry in the
        rules dictionary.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            list/str : content of 'args' entry, it could be a list with more
            rules or a string with the argument name.
        """
        return theRule['args']

    @staticmethod
    def getCounterFromRule(theRule):
        """Static method that returns the value for the 'counter' entry in the
        rules dictionary.

        Counter stores the rule order in relation with all other rules.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            int : rule counter number.
        """
        return theRule['counter']

    @staticmethod
    def traverseArgsInRule(theRule):
        """Static method that traverses all entries in 'args' entry for the
        rules dictionary.

        Args:
            theRule (dict): dictionary with the given rule to check.

        Returns:
            dict : yield with a rule.
        """
        for rule in theRule['args']:
            yield rule


if __name__ == '__main__':
    pass
